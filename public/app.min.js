!function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("graphicDisplay/graphicDisplay.html",'<div><svg width="720" height="480"></svg></div>')}])}(),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("lists/completedListForm.html",'<form name="listSetForm{{$index}}" novalidate id="listsForm"><li id="titleListItem"><label id="list_title">{{$ctrl.list.title}}</label><input type="submit" ng-click="$ctrl.removeList()($ctrl.list)" value="Delete List"><table class="listTable"><tr class="listTR"><th class="listTH">&#10003;</th><th class="listTH">Title</th><th class="listTH">Description</th><th class="listTH">Remove</th></tr><tr class="list" ng-repeat="listItem in $ctrl.list.listItems" ng-hide="listItem.completed===false"><td class="checkCol"><input type="checkbox" id="chkIsSelected" ng-checked="{{listItem.isSelected}}" ng-model="listItem.isSelected" ng-click="$ctrl.updateListItem()($ctrl.list, listItem)"></td><td class="listTD"><label class="cellListData">{{listItem.title}}</label></td><td class="listTD"><label class="cellListData">{{listItem.description}}</label></td><td class="listTD"><a href ng-click="$ctrl.removeListItem()($ctrl.list, listItem)">remove</a></td></tr></table><input type="submit" name="setIncompletedBtn" class="toggleBtn" ng-click="$ctrl.toggleCompleted()($ctrl.listType, $ctrl.list)" value="Move to Incomplete"></li></form>')}])}(),angular.module("myApp",["listsMod","tabMod","graphicDisplayMod"]),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("lists/incompleteListForm.html",'<form name="listSetForm{{$index}}" novalidate id="listsForm"><li id="titleListItem"><label id="list_title">{{$ctrl.list.title}}</label><input type="submit" name="btnDelete" ng-click="$ctrl.removeList()($ctrl.list)" value="Delete List"><table class="listTable"><tr class="listTR"><th class="listTH">&#10003;</th><th class="listTH">Title</th><th class="listTH">Description</th><th class="listTH">Remove</th></tr><tr class="list" ng-repeat="listItem in $ctrl.list.listItems" ng-hide="listItem.completed===true"><td class="checkCol"><input type="checkbox" id="chkIsSelected" ng-checked="{{listItem.isSelected}}" ng-model="listItem.isSelected" ng-click="$ctrl.updateListItem()($ctrl.list, listItem)"></td><td class="listTD"><label class="cellListData">{{listItem.title}}</label></td><td class="listTD"><label class="cellListData">{{listItem.description}}</label></td><td class="listTD"><a href ng-click="$ctrl.removeListItem()($ctrl.list, listItem)">remove</a></td></tr><tr><td class="corner-symbol">+</td><td class="newItemTD"><input type="text" name="txtTitle" ng-model="newItem.title" required></td><td class="newItemTD"><input type="text" name="txtDesc" ng-model="newItem.description" required></td><td class="newItemTD"><input type="submit" class="newItemBtn" name="btnNewItem" ng-disabled="listSetForm.$invalid" ng-click="$ctrl.addListItem()($ctrl.list, newItem)"></td></tr></table></li><input type="submit" name="setCompletedBtn" class="toggleBtn" ng-click="$ctrl.toggleCompleted()($ctrl.listType, $ctrl.list)" value="Move to Completed"> <span class="error-notification" ng-if="listSetForm.txtTitle.$invalid && listSetForm.txtTitle.$dirty || listSetForm.txtDesc.$invalid && listSetForm.txtDesc.$dirty">Please include a valid title and description.</span></form>')}])}(),angular.module("graphicDisplayMod",[]).component("graphicDisplay",{controller:"graphicDisplayCtrl",template:'<div><svg width="720" height="480"></svg></div>',bindings:{svgHeight:"<",svgWidth:"<"}}),angular.module("graphicDisplayMod").controller("graphicDisplayCtrl",["$scope","$timeout",function($scope,$timeout){d3.csv("ILWdm1.csv",function(d){return d.result=+d.result,d},function(error,data){if(error)throw error;$timeout(function(){var svg=d3.select("svg"),margin={top:20,right:20,bottom:20,left:20},height=+svg.attr("height")-margin.top-margin.bottom,width=+svg.attr("width")-margin.left-margin.right,x=d3.scaleBand().rangeRound([0,width]).padding(.1),y=d3.scaleLinear().rangeRound([height,0]),graph=svg.append("g").attr("transform","translate("+margin.left+","+margin.top+")");x.domain(data.map(function(d){return d.column})),y.domain([0,d3.max(data,function(d){return d.result})]),graph.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+height+")").call(d3.axisBottom(x)),graph.append("g").attr("class","axis axis--y").call(d3.axisLeft(y).ticks(10,"%")).append("text").attr("transform","rotate(-90)").attr("y",6).attr("dy","0.71em").attr("text-anchor","end").text("Result"),graph.selectAll(".bar").data(data).enter().append("rect").attr("class","bar").attr("x",function(d){return x(d.column)}).attr("y",function(d){return y(d.result)}).attr("width",x.bandwidth()).attr("height",function(d){return height-y(d.result)})})})}]),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("lists/listApp.html",'<list-tables lists="$ctrl.lists" incomplete-filter="$ctrl.incompleteFilter" add-list-item="$ctrl.addListItem" remove-list="$ctrl.removeList" remove-list-item="$ctrl.removeListItem" update-list-item="$ctrl.updateListItem" toggle-completed="$ctrl.toggleCompleted" list-type="$ctrl.listType"></list-tables><div ng-hide="$ctrl.listType===\'completed\'"><div id="formSeperator"></div><div id="newListForm"><new-list-form add-list="$ctrl.addList"></new-list-form></div></div>')}])}(),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("lists/listTables.html",'<div ng-switch="$ctrl.listType"><ul class="lists" ng-switch-when="incomplete"><incomplete-list-form list="list" list-type="$ctrl.listType" add-list-item="$ctrl.addListItem()" remove-list="$ctrl.removeList()" remove-list-item="$ctrl.removeListItem()" update-list-item="$ctrl.updateListItem()" toggle-completed="$ctrl.toggleCompleted()" ng-repeat="list in $ctrl.lists | filter: $ctrl.incompleteFilter"></incomplete-list-form></ul><ul class="lists" ng-switch-when="completed"><completed-list-form list="list" list-type="$ctrl.listType" remove-list="$ctrl.removeList()" remove-list-item="$ctrl.removeListItem()" update-list-item="$ctrl.updateListItem()" toggle-completed="$ctrl.toggleCompleted()" ng-repeat="list in $ctrl.lists | filter: {listItems: {completed: true}}"></completed-list-form></ul></div>')}])}(),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("lists/newListForm.html",'<form name="newListForm"><label>New List Title:</label><input type="text" ng-model="title" required> <input type="submit" ng-click="$ctrl.addList()(title)"></form>')}])}(),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("tab/tab.html",'<div class="tab" ng-class="{ active : $ctrl.active}" ng-if="$ctrl.active === true"><ng-transclude></ng-transclude></div>')}])}(),function(module){try{module=angular.module("myApp")}catch(e){module=angular.module("myApp",[])}module.run(["$templateCache",function($templateCache){$templateCache.put("tab/tabSet.html",'<ul class="tab-selector"><li ng-repeat="tab in $ctrl.tabs" ng-class="{ active: tab.active }" ng-click="$ctrl.selectTab(tab)">{{tab.header}}</li></ul><ng-transclude></ng-transclude>')}])}(),angular.module("listsMod",["ngStorage"]).component("listApp",{controller:["$scope","$http","$localStorage",function($scope,$http,$localStorage){var self=this;self.getLists=function(){void 0===$localStorage.lists?$http.get("assets/JSON/lists.json").then(function(res){console.log("Attempting to access data."),self.lists=res.data,self.saveListData()}):self.lists=localStorage.lists},self.incompleteFilter=function(){return function(list){return!list.listItems.completed||list.isNew}},self.loadListData=function(){self.lists=$localStorage.lists},self.saveListData=function(){$localStorage.lists=self.lists},self.addList=function(title){self.lists.push({title:title,isNew:!0,listItems:[]})},self.removeList=function(list){var index=self.lists.indexOf(list);self.lists.splice(index,1)},self.addListItem=function(list,newItem){newItem.isSelected=!1,newItem.completed=!1,list.isNew=!1;var newItemCopy=angular.copy(newItem);list.listItems.push(newItemCopy)},self.updateListItem=function(list,listItem){var listIndex=self.lists.indexOf(list),itemIndex=list.listItems.indexOf(listItem);angular.copy(listItem);self.lists[listIndex].listItems[itemIndex]=listItem},self.removeListItem=function(list,listItem){var listIndex=self.lists.indexOf(list),itemIndex=list.listItems.indexOf(listItem);self.lists[listIndex].listItems.splice(itemIndex,1)},self.toggleCompleted=function(listType,list){for(var liIsSelected,liLength=list.listItems.length,index=self.lists.indexOf(list),i=0;i<liLength;i++)!0===(liIsSelected=list.listItems[i].isSelected)&&"incomplete"===listType?list.listItems[i].completed=!0:!0===liIsSelected&&"completed"===listType&&(list.listItems[i].completed=!1);setUnSelected(),self.lists[index]=angular.copy(list)};var setUnSelected=function(){var i,a,theList,liLength,listsLength=self.lists.length;for(i=0;i<listsLength;i++)for(liLength=(theList=self.lists[i]).listItems.length,a=0;a<liLength;a++)theList.listItems[a].isSelected=!1};self.getLists(),void 0!==$localStorage.lists&&self.loadListData()}],template:'<list-tables lists="$ctrl.lists" incomplete-filter="$ctrl.incompleteFilter" add-list-item="$ctrl.addListItem" remove-list="$ctrl.removeList" remove-list-item="$ctrl.removeListItem" update-list-item="$ctrl.updateListItem" toggle-completed="$ctrl.toggleCompleted" list-type="$ctrl.listType"></list-tables><div ng-hide="$ctrl.listType===\'completed\'"><div id="formSeperator"></div><div id="newListForm"><new-list-form add-list="$ctrl.addList"></new-list-form></div></div>',bindings:{listType:"@"}}),angular.module("listsMod").component("listTables",{bindings:{lists:"<",incompleteFilter:"&",addListItem:"&",removeList:"&",removeListItem:"&",updateListItem:"&",toggleCompleted:"&",listType:"<"},template:'<div ng-switch="$ctrl.listType"><ul class="lists" ng-switch-when="incomplete"><incomplete-list-form list="list" list-type="$ctrl.listType" add-list-item="$ctrl.addListItem()" remove-list="$ctrl.removeList()" remove-list-item="$ctrl.removeListItem()" update-list-item="$ctrl.updateListItem()" toggle-completed="$ctrl.toggleCompleted()" ng-repeat="list in $ctrl.lists | filter: $ctrl.incompleteFilter"></incomplete-list-form></ul><ul class="lists" ng-switch-when="completed"><completed-list-form list="list" list-type="$ctrl.listType" remove-list="$ctrl.removeList()" remove-list-item="$ctrl.removeListItem()" update-list-item="$ctrl.updateListItem()" toggle-completed="$ctrl.toggleCompleted()" ng-repeat="list in $ctrl.lists | filter: {listItems: {completed: true}}"></completed-list-form></ul></div>'}),angular.module("listsMod").component("incompleteListForm",{bindings:{list:"<",incompleteFilter:"&",addListItem:"&",removeList:"&",removeListItem:"&",updateListItem:"&",toggleCompleted:"&",listType:"<"},template:'<form name="listSetForm{{$index}}" novalidate id="listsForm"><li id="titleListItem"><label id="list_title">{{$ctrl.list.title}}</label> <input type="submit" name="btnDelete" ng-click="$ctrl.removeList()($ctrl.list)" value="Delete List"><table class="listTable"><tr class="listTR"><th class="listTH">&#10003;</th><th class="listTH">Title</th><th class="listTH">Description</th><th class="listTH">Remove</th></tr><tr class="list" ng-repeat="listItem in $ctrl.list.listItems" ng-hide="listItem.completed===true"><td class="checkCol"><input type="checkbox" id="chkIsSelected" ng-checked="{{listItem.isSelected}}" ng-model="listItem.isSelected" ng-click="$ctrl.updateListItem()($ctrl.list, listItem)"></td><td class="listTD"><label class="cellListData">{{listItem.title}}</label></td><td class="listTD"><label class="cellListData">{{listItem.description}}</label></td><td class="listTD"><a ng-click="$ctrl.removeListItem()($ctrl.list, listItem)">remove</a></td></tr><tr><td class="corner-symbol">+</td><td class="newItemTD"><input type="text" name="txtTitle" ng-model="newItem.title" required></td><td class="newItemTD"><input type="text" name="txtDesc" ng-model="newItem.description" required></td><td class="newItemTD"><input type="submit" class="newItemBtn" name="btnNewItem" ng-disabled="listSetForm.$invalid" ng-click="$ctrl.addListItem()($ctrl.list, newItem)"></td></tr></table></li><input type="submit" name="setCompletedBtn" class="toggleBtn" ng-click="$ctrl.toggleCompleted()($ctrl.listType, $ctrl.list)" value="Move to Completed"> <span class="error-notification" ng-if="listSetForm.txtTitle.$invalid && listSetForm.txtTitle.$dirty || listSetForm.txtDesc.$invalid && listSetForm.txtDesc.$dirty">Please include a valid title and description.</span></form>'}),angular.module("listsMod").component("completedListForm",{bindings:{list:"<",addListItem:"&",removeList:"&",removeListItem:"&",updateListItem:"&",toggleCompleted:"&",listType:"<"},template:'<form name="listSetForm{{$index}}" novalidate id="listsForm"><li id="titleListItem"><label id="list_title">{{$ctrl.list.title}}</label> <input type="submit" ng-click="$ctrl.removeList()($ctrl.list)" value="Delete List"><table class="listTable"><tr class="listTR"><th class="listTH">&#10003;</th><th class="listTH">Title</th><th class="listTH">Description</th><th class="listTH">Remove</th></tr><tr class="list" ng-repeat="listItem in $ctrl.list.listItems" ng-hide="listItem.completed===false"><td class="checkCol"><input type="checkbox" id="chkIsSelected" ng-checked="{{listItem.isSelected}}" ng-model="listItem.isSelected" ng-click="$ctrl.updateListItem()($ctrl.list, listItem)"></td><td class="listTD"><label class="cellListData">{{listItem.title}}</label></td><td class="listTD"><label class="cellListData">{{listItem.description}}</label></td><td class="listTD"><a ng-click="$ctrl.removeListItem()($ctrl.list, listItem)">remove</a></td></tr></table><input type="submit" name="setIncompletedBtn" class="toggleBtn" ng-click="$ctrl.toggleCompleted()($ctrl.listType, $ctrl.list)" value="Move to Incomplete"></li></form>'}),angular.module("listsMod").component("newListForm",{bindings:{addList:"&"},template:'<form name="newListForm"><label>New List Title:</label><input type="text" ng-model="title" required> <input type="submit" ng-click="$ctrl.addList()(title)"></form>'}),angular.module("tabMod",[]).component("tabSet",{controller:"tabSetCtrl",template:'<ul class="tab-selector"><li ng-repeat="tab in $ctrl.tabs" ng-class="{ active: tab.active }" ng-click="$ctrl.selectTab(tab)">{{tab.header}}</li></ul><ng-transclude></ng-transclude>',transclude:!0}),angular.module("tabMod").controller("tabSetCtrl",["$scope","$element","$attrs",function($scope,$element,$attrs){console.log("Entered tabSet controller.");var self=this;self.tabs=[],self.addTab=function(tab){self.tabs.push(tab),1===self.tabs.length&&self.selectTab(tab)},self.selectTab=function(tab){angular.forEach(self.tabs,function(tab){tab.active=!1}),tab.active=!0}}]),angular.module("tabMod").component("tabPane",{template:'<div class="tab" ng-class="{ active : $ctrl.active}" ng-if="$ctrl.active === true"><ng-transclude></ng-transclude></div>',transclude:!0,controller:["$scope","$element","$attrs",function($scope,$element,$attrs){console.log("Entered tab controller");var self=this;self.$onInit=function(){self.$OnInit=self.tabSet.addTab(this)}}],bindings:{header:"@"},require:{tabSet:"^tabSet"}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
